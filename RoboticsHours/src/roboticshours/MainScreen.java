package roboticshours;

import java.awt.CardLayout;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.regex.Pattern;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.border.Border;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author Alan
 */
public class MainScreen extends JFrame implements TableModelListener{
    static JFrame mainScreen;
    private Account account;
    DefaultTableModel dataModel;
    Border defaultBorder;
    /**
     * Creates new form NewJFrame
     * @param a
     */
    @SuppressWarnings("empty-statement")
    public MainScreen(Account a) {
        initComponents();
        defaultBorder = manualDateEntry.getBorder();
        account = a;
        userName.setText(a.getAccountName().split("[+]")[0]);
        ArrayList<Entry> entries = a.getEntries();
        Object[][] data = new Object[entries.size()][4];
        for(int i = 0; i < entries.size(); i++){
            Entry e = entries.get(i);
            Calendar d = e.getDate();
            Calendar dm = e.getDateModified();
            data[i][0] = false;
            data[i][1] = (d.get(Calendar.MONTH) + 1 + "/" + d.get(Calendar.DAY_OF_MONTH) + "/" + (d.get(Calendar.YEAR)));
            data[i][2] = e.getHours();
            data[i][3] = (dm.get(Calendar.MONTH) + 1 + "/" + dm.get(Calendar.DAY_OF_MONTH) + "/" + (dm.get(Calendar.YEAR)));
        }
        dataModel = new DefaultTableModel(data, new String [] {"", "Date", "Hours", "Date Modified"})
        {
            Class[] types = new Class [] {java.lang.Boolean.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class};
            boolean[] canEdit = new boolean [] {true, true, true, false};

            @Override
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        dataModel.addTableModelListener(this);
        entryTable.setModel(dataModel);
        
        DefaultTableCellRenderer center = new DefaultTableCellRenderer();
        center.setHorizontalAlignment(JLabel.CENTER);
        
        TableColumn column;
        for (int i = 0; i < 4; i++) {
            column = entryTable.getColumnModel().getColumn(i);
            if (i == 0) {
                column.setPreferredWidth(5); //third column is bigger
            }
            else if(i == 2){
                column.setPreferredWidth(10);
                column.setCellRenderer(center);
            }
            else{
                column.setCellRenderer(center);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        startPanel = new javax.swing.JPanel();
        newButton = new javax.swing.JButton();
        viewButton = new javax.swing.JButton();
        greetingLabel = new javax.swing.JLabel();
        viewEditPanel = new javax.swing.JPanel();
        entryTableHeader = new javax.swing.JScrollPane();
        entryTable = new javax.swing.JTable();
        tableBackButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        newEntryPanel = new javax.swing.JPanel();
        manualDateEntry = new javax.swing.JTextField();
        userName = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        currentDate = new javax.swing.JRadioButton();
        hourSelector = new javax.swing.JSpinner();
        hourLabel = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        submitButton = new javax.swing.JButton();
        newBackButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);

        mainPanel.setLayout(new java.awt.CardLayout());

        newButton.setText("Enter Hours");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        viewButton.setText("View/Edit Hours");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        greetingLabel.setText("Hello. What would you like to do?");

        javax.swing.GroupLayout startPanelLayout = new javax.swing.GroupLayout(startPanel);
        startPanel.setLayout(startPanelLayout);
        startPanelLayout.setHorizontalGroup(
            startPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(startPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(newButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(viewButton)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, startPanelLayout.createSequentialGroup()
                .addContainerGap(91, Short.MAX_VALUE)
                .addComponent(greetingLabel)
                .addGap(88, 88, 88))
        );
        startPanelLayout.setVerticalGroup(
            startPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, startPanelLayout.createSequentialGroup()
                .addContainerGap(77, Short.MAX_VALUE)
                .addComponent(greetingLabel)
                .addGap(55, 55, 55)
                .addGroup(startPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newButton)
                    .addComponent(viewButton))
                .addContainerGap())
        );

        mainPanel.add(startPanel, "startPanel");

        entryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Date", "Hours", "Date Modified"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        entryTable.getTableHeader().setReorderingAllowed(false);
        entryTableHeader.setViewportView(entryTable);
        if (entryTable.getColumnModel().getColumnCount() > 0) {
            entryTable.getColumnModel().getColumn(0).setHeaderValue("Date");
            entryTable.getColumnModel().getColumn(1).setHeaderValue("Hours");
            entryTable.getColumnModel().getColumn(2).setHeaderValue("Date Modified");
        }

        tableBackButton.setText("Back");
        tableBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableBackButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete Selected");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout viewEditPanelLayout = new javax.swing.GroupLayout(viewEditPanel);
        viewEditPanel.setLayout(viewEditPanelLayout);
        viewEditPanelLayout.setHorizontalGroup(
            viewEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(entryTableHeader, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
            .addGroup(viewEditPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tableBackButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(deleteButton)
                .addContainerGap())
        );
        viewEditPanelLayout.setVerticalGroup(
            viewEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(viewEditPanelLayout.createSequentialGroup()
                .addComponent(entryTableHeader, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(viewEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tableBackButton)
                    .addComponent(deleteButton))
                .addContainerGap())
        );

        mainPanel.add(viewEditPanel, "viewEditPanel");

        manualDateEntry.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        userName.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        userName.setText(getName());

        nameLabel.setText("Name:");

        currentDate.setText("Use today's date");
        currentDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                currentDateActionPerformed(evt);
            }
        });

        hourSelector.setModel(new javax.swing.SpinnerNumberModel(1, 1, 12, 1));

        hourLabel.setText("Number of hours:");

        dateLabel.setText("Date (MM/DD/YYYY):");

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        newBackButton.setText("Back");
        newBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newBackButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout newEntryPanelLayout = new javax.swing.GroupLayout(newEntryPanel);
        newEntryPanel.setLayout(newEntryPanelLayout);
        newEntryPanelLayout.setHorizontalGroup(
            newEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, newEntryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(newEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, newEntryPanelLayout.createSequentialGroup()
                        .addComponent(nameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(userName, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, newEntryPanelLayout.createSequentialGroup()
                        .addComponent(newBackButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(submitButton))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, newEntryPanelLayout.createSequentialGroup()
                        .addComponent(dateLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(currentDate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 5, Short.MAX_VALUE)
                        .addComponent(manualDateEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(newEntryPanelLayout.createSequentialGroup()
                        .addComponent(hourLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(hourSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        newEntryPanelLayout.setVerticalGroup(
            newEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(newEntryPanelLayout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(newEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(userName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(newEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hourSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hourLabel))
                .addGap(18, 18, 18)
                .addGroup(newEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateLabel)
                    .addComponent(currentDate)
                    .addComponent(manualDateEntry, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(newEntryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newBackButton)
                    .addComponent(submitButton))
                .addContainerGap())
        );

        mainPanel.add(newEntryPanel, "newEntryPanel");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        getAccessibleContext().setAccessibleName("mainFrame");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        ((CardLayout)(mainPanel.getLayout())).show(mainPanel, "newEntryPanel");
    }//GEN-LAST:event_newButtonActionPerformed

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        for(int i = dataModel.getRowCount(); i > 0; i--){
            dataModel.setValueAt(false, i - 1, 0);
        }
        entryTable.clearSelection();
        ((CardLayout)(mainPanel.getLayout())).show(mainPanel, "viewEditPanel");
    }//GEN-LAST:event_viewButtonActionPerformed

    private void newBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newBackButtonActionPerformed
        ((CardLayout)(mainPanel.getLayout())).show(mainPanel, "startPanel");
        hourSelector.setValue(1);
        currentDate.setSelected(false);
        manualDateEntry.setBorder(defaultBorder);
        manualDateEntry.setText("");
        manualDateEntry.setEditable(true);
    }//GEN-LAST:event_newBackButtonActionPerformed

    private void tableBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tableBackButtonActionPerformed
        ((CardLayout)(mainPanel.getLayout())).show(mainPanel, "startPanel");
    }//GEN-LAST:event_tableBackButtonActionPerformed

    private void currentDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_currentDateActionPerformed
        if(currentDate.isSelected()){
            Calendar today = Calendar.getInstance();
            if(today.get(Calendar.MONTH) < 9)
                manualDateEntry.setText("0" + (today.get(Calendar.MONTH) + 1) + "/" + today.get(Calendar.DATE) + "/" + today.get(Calendar.YEAR));
            else
                manualDateEntry.setText(today.get(Calendar.MONTH) + 1 + "/" + today.get(Calendar.DATE) + "/" + today.get(Calendar.YEAR));
            manualDateEntry.setEditable(false);
        }
        else{
            manualDateEntry.setText("");
            manualDateEntry.setEditable(true);
        }
    }//GEN-LAST:event_currentDateActionPerformed
    
    @Override
    public void tableChanged(TableModelEvent e){
        if(e.getColumn() == 1){
            String newDate = (String) dataModel.getValueAt(e.getFirstRow(), 1);
            if(parseDate(newDate)){
                Calendar date = new GregorianCalendar();
                String[] datePieces = newDate.split("/"); //Split the date into 3 pieces.
                if(datePieces[2].length() == 2){ //shorthand date form
                    datePieces[2] = ("" + date.get(Calendar.YEAR)).substring(0, 2) + datePieces[2]; //Getting the first two digits of the year. This method ensures working code after 2100
                }

                date.set(Integer.parseInt(datePieces[2]), Integer.parseInt(datePieces[0]) - 1, Integer.parseInt(datePieces[1]));
                account.getEntries().get(e.getFirstRow()).setDate(date);
                dataModel.removeTableModelListener(this); //avoiding recursive fireTableStateChanged by deregistering the listener before editing cell value
                dataModel.setValueAt((date.get(Calendar.MONTH) + 1 + "/" + date.get(Calendar.DAY_OF_MONTH) + "/" + (date.get(Calendar.YEAR))), e.getFirstRow(), 1);
                dataModel.addTableModelListener(this); //Strangely, none of the other setValueAt calls seem to have this issue.
            }
            else{
                Calendar oldDate = account.getEntries().get(e.getFirstRow()).getDate();
                dataModel.setValueAt((oldDate.get(Calendar.MONTH) + 1 + "/" + oldDate.get(Calendar.DAY_OF_MONTH) + "/" + (oldDate.get(Calendar.YEAR))), e.getFirstRow(), 1);
            }
        }
        else if (e.getColumn() == 2){
            int hours = (int) dataModel.getValueAt(e.getFirstRow(), 2);
            if(hours > 0 && hours < 13){
                account.getEntries().get(e.getFirstRow()).setHours(hours);
            }
            else{
                JOptionPane.showMessageDialog(rootPane, "Hour value is not in accepted range (1 - 12)", "Error", JOptionPane.ERROR_MESSAGE);
                dataModel.setValueAt(account.getEntries().get(e.getFirstRow()).getHours(), e.getFirstRow(), 2);
            }
        }
    }
    
    private boolean parseDate(String s){
        Pattern datePattern = Pattern.compile("^\\d{1,2}/\\d{1,2}/(\\d\\d){1,2}$");
        if(s.equals("")){
            JOptionPane.showMessageDialog(rootPane, "Please enter a date.", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        else if(!datePattern.matcher(s).find()){ //TODO convert date
            JOptionPane.showMessageDialog(rootPane, "Please enter a date in the format MM/DD/YYYY.", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        else{
            Calendar date = new GregorianCalendar();
            boolean acceptable = true; //(acceptable)
            String reason = ""; //Reason for rejection
            final String DNE = "That date does not exist.";
            String[] datePieces = s.split("/"); //Split the date into 3 pieces.
            if(datePieces[2].length() == 2){ //shorthand date form
                datePieces[2] = ("" + date.get(Calendar.YEAR)).substring(0, 2) + datePieces[2]; //Getting the first two digits of the year. This method ensures working code after 2100
            }
            int[] dateNumbers = new int[3];
            for(int i = 0; i < 3; i++){
                dateNumbers[i] = Integer.parseInt(datePieces[i]); //Store the integer values
                if(dateNumbers[i] < 0){ //If they have negative pieces
                    acceptable = false; //UNACCEPTABLE
                    reason = "You cannot have negative numbers in the date.";
                }
            }
            if(Math.abs(dateNumbers[2] - date.get(Calendar.YEAR)) > 1){ //Dates that are < +- 1 year from the current date
                acceptable = false; //UNACCEPTABLE
                reason = "That date is out of the accepted range (1 year).";
            }
            if(dateNumbers[1] > 31){ //Months with more than 31 days
               acceptable = false; //UNACCEPTABLE 
               reason = DNE;
            }
            else if(dateNumbers[0] % 2 == 1 && dateNumbers[1] > 30){ //Short months with more than 30 days
                acceptable = false; //UNACCEPTABLE
                reason = DNE;
            }
            else if(dateNumbers[0] == 2 && dateNumbers[1] > 29){ //February with more than 29 days
                acceptable = false; //UNACCEPTABLE
                reason = DNE;
            }
            else if(dateNumbers[0] == 2 && dateNumbers[1] == 29){ //It's February 29. Leap year detection.
                if(dateNumbers[2] % 4 != 0){ //Year is not divisible by 4; not a leap year
                    acceptable = false; //UNACCEPTABLE
                    reason = DNE;
                }
                else if(dateNumbers[2] % 100 != 0){ //Year is not divisible by 100 (every 100 years, the leap year is skipped)
                    acceptable = true; //(acceptable)
                }
                else if(dateNumbers[2] % 400 != 0){ //Year is not divisible by 400 (Of course, the skipping gets skipped every 400 years)
                    acceptable = false; //UNACCEPTABLE
                    reason = DNE;
                }
                else{ //No reason to think it's not a leap year.
                    acceptable = true; //(acceptable)
                }
            }
            if(acceptable){
                date.set(Integer.parseInt(datePieces[2]), Integer.parseInt(datePieces[0]) - 1, Integer.parseInt(datePieces[1]));
                if(Calendar.getInstance().compareTo(date) < 0){ //Trying to enter dates in the future
                    JOptionPane.showMessageDialog(rootPane, "You cannot enter dates in the future.", "Error", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
                else{
                    return true;
                }
            }
            else{
                JOptionPane.showMessageDialog(rootPane, reason + "\nPlease enter a valid date.", "Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
    }
    
    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        if(parseDate(manualDateEntry.getText())){
            Calendar date = new GregorianCalendar();
            String[] datePieces = manualDateEntry.getText().split("/"); //Split the date into 3 pieces.
            Object[] data = new Object[4];
            data[3] = (date.get(Calendar.MONTH) + 1 + "/" + date.get(Calendar.DAY_OF_MONTH) + "/" + (date.get(Calendar.YEAR)));
            
            if(datePieces[2].length() == 2){ //shorthand date form
                datePieces[2] = ("" + date.get(Calendar.YEAR)).substring(0, 2) + datePieces[2]; //Getting the first two digits of the year. This method ensures working code after 2100
            }
            
            date.set(Integer.parseInt(datePieces[2]), Integer.parseInt(datePieces[0]) - 1, Integer.parseInt(datePieces[1]));
            
            account.addEntry(new Entry(account, (int)hourSelector.getValue(), date));
            
            data[0] = false;
            data[1] = (date.get(Calendar.MONTH) + 1 + "/" + date.get(Calendar.DAY_OF_MONTH) + "/" + (date.get(Calendar.YEAR)));
            data[2] = (int)hourSelector.getValue();
            dataModel.addRow(data);
            
            System.out.println("New entry added."); //TODO Auto update table
            System.out.println("Last entry in the list:");
            System.out.println(account.getEntries().get(account.getEntries().size() - 1));
            System.out.println("Now exporting the file:");
            ImportExport.exportAll();
            
            manualDateEntry.setBorder(defaultBorder);
            JOptionPane.showMessageDialog(rootPane, "Added successfully!", "Success!", JOptionPane.INFORMATION_MESSAGE);
            newBackButtonActionPerformed(null); 
        }
        else{
            manualDateEntry.setBorder(BorderFactory.createLineBorder(Color.RED, 2));
        }
    }//GEN-LAST:event_submitButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        boolean delete = false, itemsToDelete = false;
        String message = "Are you sure you want to delete the selected entries?\nThis cannot be undone!";
        
        for(int i = dataModel.getRowCount() - 1; i > -1; i--){
            if((boolean)dataModel.getValueAt(i, 0)){
                if(!itemsToDelete){
                    delete = (JOptionPane.showConfirmDialog(rootPane, message, "Confirm Delete", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE)) == 0;
                    itemsToDelete = true;
                }
                if(delete){
                    account.getEntries().remove(i);
                    dataModel.removeRow(i);
                }
                else{
                    dataModel.setValueAt(false, i, 0);
                }
            }
        }
        if(!itemsToDelete){
            JOptionPane.showMessageDialog(rootPane, "There are no entries selected.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else{
            ImportExport.exportSingleFile(account);
        }
        entryTable.clearSelection();
    }//GEN-LAST:event_deleteButtonActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton currentDate;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTable entryTable;
    private javax.swing.JScrollPane entryTableHeader;
    private javax.swing.JLabel greetingLabel;
    private javax.swing.JLabel hourLabel;
    private javax.swing.JSpinner hourSelector;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextField manualDateEntry;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton newBackButton;
    private javax.swing.JButton newButton;
    private javax.swing.JPanel newEntryPanel;
    private javax.swing.JPanel startPanel;
    private javax.swing.JButton submitButton;
    private javax.swing.JButton tableBackButton;
    private javax.swing.JLabel userName;
    private javax.swing.JButton viewButton;
    private javax.swing.JPanel viewEditPanel;
    // End of variables declaration//GEN-END:variables
}
